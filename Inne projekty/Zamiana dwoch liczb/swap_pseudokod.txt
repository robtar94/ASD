// Wszystkie metody w ktorych wystepuje dzielenie nie sa w pełni uniersalne, ponieważ może wystąpić dzielenie przez zero.

// c XOR d - operacja bitowa zwana alternatywą wykluczającą.
// Wynikowy bit jest ustawiany na 1 tylko wówczas gdy dokładnie jeden bit,
// któregoś z argumentów ustawiony jest na 1.

//  NOT c - Jest to operacja jednoargumentowa. Wynikowy bit jest ustawiany na 1 tylko wówczas gdy bit argumentu jest ustawiony na 0.
// Możemy zatem powiedzieć, że wynikiem jest 1 gdy bit c nie jest ustawiony na 1.

// PRIORYTETY OPERATORÓW:
// ()
// */
// +/-
// NOT
// XOR
// = (podstawienie)

// metoda 1
 
c = c + d // 1 dodawanie, 1 przypisanie
d = c - d // 1 odejmowanie, 1 przypisanie 
c = c - d // 1 odejmowanie, 1 przypisanie
 
// razem 6 operacji

//metoda 2
 
c = c * d // 1 mnozenie, 1 podstawienie
d = c / d // 1 dzielenie, 1 podstawienie
c = c / d // 1 dzielenie, 1 podstawienie

// razem 6 operacji

//metoda 3

c = c XOR d // 1 dzielenie, 1 przypisanie
d = c XOR d // 1 mnozenie, 1 przypisanie
c = c XOR d // 1 dzielenie, 1 przypisanie

// razem 6 operacji



//metoda 4

c = c - d // 1 operacja przypisania, 1 odejmowanie
d = c + d // 1 operacja przypisania, 1 dodawanie
c = d - c // 1 operacja przypisania, 1 odejmowanie

// razem 6 operacji

// metoda 5

c = d - c // 1 odejmowanie, 1 przypisanie 
d = d - c // 1 odejmowanie, 1 przypisanie
c = d + c // 1 dodawanie, 1 przypisanie

// razem 6 operacji

//metoda 6

c = c + d //1 dodawanie 1 przypisanie
d = d - c //1 odejmowanie 1 przypisanie
c = c + d //1 dodawanie 1 przypisanie
d = (-1) * d //1 mnożenie 1 przypisanie

// razem 8 operacji

// metoda 7

c = NOT(c XOR d) // 1 przypisanie, 1 dopełnienie bitowe, 1 XOR
d = NOT(c XOR d) // 1 przypisanie, 1 dopełnienie bitowe, 1 XOR
c = NOT(c XOR d) // 1 przypisanie, 1 dopełnienie bitowe, 1 XOR

// razem 9 operacji









