// Wszystkie metody w ktorych wystepuje dzielenie nie sa w pełni uniersalne, ponieważ może wystąpić dzielenie przez zero.

// c XOR d - operacja bitowa zwana alternatywą wykluczającą.
// Wynikowy bit jest ustawiany na 1 tylko wówczas gdy dokładnie jeden bit,
// któregoś z argumentów ustawiony jest na 1.

// Tablica prawdy dla operatora XOR:
+---+---+---------+
| C | D | C XOR D |
+---+---+---------+
| 0 | 0 |    0    |
+---+---+---------+
| 1 | 0 |    1    |
+---+---+---------+
| 0 | 1 |    1    |
+---+---+---------+
| 1 | 1 |    0    |
+---+---+---------+



//  NOT c  - Operacja dopełnienia bitowego. Jest to operacja jednoargumentowa. Wynikowy bit jest ustawiany na 1 tylko wówczas gdy bit argumentu jest ustawiony na 0.
// Możemy zatem powiedzieć, że wynikiem jest 1 gdy bit c nie jest ustawiony na 1.

// Tabela prawdy dla dopełnienia bitowego:
 
+---+-------+
| C |  NOT C|
+---+-------+
| 0 | 1     |
+---+-------+
| 1 | 0     |
+---+-------+




// PRIORYTETY OPERATORÓW:
// ()
// */
// +/-
// NOT
// XOR
// = (podstawienie)


// 1 metoda

c = (c + d) - (d = c) // 1 dodawanie, 1 odejmowanie, 2 przypisania
 
// razem 4 operacje 

// 2 metoda

c = d / c * (d=c) // 2 przypisania, 1 mnozenie, 1 dzielenie

// razem 4 operacje 

// metoda 3

c=d-c+(d=c) // 2 przypisania, 1 odejmowanie, 1 dodawanie

// razem 4 operacje 

// metoda 4

c = d * c / (d=c) // 1 mnozenie, 1 dzielenie, 2 operacje przypisania

//razem 4 operacje

// metoda  5

c = d XOR c XOR (d=c) // 2 operacje przypisania, 2 operacje XOR

//razem 4 operacje

// metoda 6
 
c = c + d // 1 dodawanie, 1 przypisanie
d = c - d // 1 odejmowanie, 1 przypisanie 
c = c - d // 1 odejmowanie, 1 przypisanie
 
// razem 6 operacji

//metoda 7
 
c = c * d // 1 mnozenie, 1 podstawienie
d = c / d // 1 dzielenie, 1 podstawienie
c = c / d // 1 dzielenie, 1 podstawienie

// razem 6 operacji

//metoda 8

c = c / d // 1 dzielenie, 1 przypisanie
d = c * d // 1 mnozenie, 1 przypisanie
c = d / c // 1 dzielenie, 1 przypisanie

// razem 6 operacji

// metoda 9

c = c XOR d // 1 XOR, 1 operacja przypisania
d = c XOR d // 1 XOR, 1 operacja przypisania
c = c XOR d // 1 XOR, 1 operacja przypisania

// razem 6 operacji

//metoda 10

c = c - d // 1 operacja przypisania, 1 odejmowanie
d = c + d // 1 operacja przypisania, 1 dodawanie
c = d - c // 1 operacja przypisania, 1 odejmowanie

// razem 6 operacji

// metoda 11

c = d - c // 1 odejmowanie, 1 przypisanie 
d = d - c // 1 odejmowanie, 1 przypisanie
c = d + c // 1 dodawanie, 1 przypisanie

// razem 6 operacji

// metoda 12

c = d - NOT(c) - 1 // 4 operacje
d = c + NOT(d) + 1 // 4 operacje
c = c + NOT(d) + 1 // 4 operacje

// razem 12 operacji 


//metoda 13

c = c + d //1 dodawanie 1 przypisanie
d = d - c //1 odejmowanie 1 przypisanie
c = c + d //1 dodawanie 1 przypisanie
d = (-1) * d //1 mnożenie 1 przypisanie

// razem 8 operacji

// metoda 14

c = NOT(c XOR d) // 1 przypisanie, 1 dopełnienie bitowe, 1 XOR
d = NOT(c XOR d) // 1 przypisanie, 1 dopełnienie bitowe, 1 XOR
c = NOT(c XOR d) // 1 przypisanie, 1 dopełnienie bitowe, 1 XOR

// razem 9 operacji

//metoda 15

c = (c + d) - (d = c) + n - n // 1 dodawanie, 2 odejmowania, 2 podstawienia

// razem 5 operacji








